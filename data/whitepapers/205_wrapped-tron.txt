Getting Started




























































































































































































Jump to Content
Guides
API Reference
Community
Discord
Blog
FAQ
Bug Bounty
Announcements
Home
Guides
API Reference
Changelog
v3.7
v4.0
v4.0.1
v4.1.1
v4.1.2
v4.1.3
v4.2.0
v4.2.2
v4.3.0
v4.4.0
v4.4.2
v4.5.1
v4.5.2
v4.6.0
v4.7.0
v4.7.1
v4.7.2
v4.7.3
v4.7.4
v4.7.5
Guides
API Reference
Community
Discord
Blog
FAQ
Bug Bounty
Announcements
Change Log
Change Log
v
4.7.5
Loadingâ¦
Search
Introduction
Getting Started
Build a Web3 App
TRON Protocol
Account
Resource Model
Staking on TRON network
Super Representatives
Becoming a Super Representative
Transaction
Block
TRON Virtual Machine (TVM)
Event Log
VM Exception Handling
Nodes and Clients
Networks
Multi-Signature
Multi-Signature Example Process Flow
Consensus
Token Standards
Overview
TRX
TRC-10
TRC-10 Transfer in Smart Contracts
TRC-20
Protocol Interface
Contract Example
Issuing TRC-20 tokens tutorial
TRC-20 Contract Interaction
Get TRC-20 transaction history
TRC-721
Protocol Interface
Contract Example
TRC-721 Token Issuance
TRC-721 Contract Interaction
Uploading NFT Metadata to BTFS Network
Smart Contracts
Introduction
Programming Language
Stake 2.0 Solidity API
Deployment and Invocation
Parameter Encoding and Decoding
FeeLimit Parameter Setting
Security
TRONZ Shielded Smart Contract
Implementation Details
How to Use Shielded Smart Contracts
Build Node
Deploy A Node
Main Net Database Snapshots
Tron Private Chain
Event Subscription
Event Plugin Deployment (MongoDB)
Event Plugin Deployment (Kafka)
Built-in Message Queue Subscription (ZeroMQ)
DApp Development Guide
DApp Development Tools
TronGrid
TronBox
Tron-IDE
TronWeb
Trident-java
TronStation
WalletConnect-TRON
Tronwallet Adapter
TronWidgets
Smart Contract Development
Creating and Compiling
Deploying
Querying the Contract Data
Smart Contract Interaction
DApp Integration with TronLink
Introduction
Tronlink Events
Adding assets to TronLink
Exchange/Wallet integrate with the TRON network
HTTP API
API Signature and Broadcast Flow
API Reference
Cross-Chain
BitTorrent Chain
Oracle
Band Oracle
WINkLink
Decentralized Exchanges
Sunswap
Community Projects
Rosetta API
GO SDK - gotron-sdk
Glossary
Glossary
TRON Community
FAQ
Announcements
Powered byÂ 
Getting Started
Suggest Edits
TRON is an open-source public blockchain platform that supports smart contracts. TRON is compatible with Ethereum, which means that you can migrate smart contracts on Ethereum to TRON directly or with minor modifications. TRON relies on a unique consensus mechanism to realize the high TPS of the TRON network that is far beyond Ethereum, bringing developers a good experience of faster transactions.


TRON is different from Ethereum, mainly in the following aspects:




Consensus Mechanism

Currently, the Ethereum network adopts the POW consensus and will adopt the POS consensus in the future. TRON's consensus mechanism is DPOS. For more information about the TRON consensus mechanism, please refer to 
TRON consensus mechanism
.


Resource Model

Ethereum transactions need to pay gas fees, and the TRON network transactions need to pay bandwidth and energy fees, where bandwidth is a unit to measure the size of a transaction in bytes. The larger the transaction, the more bandwidth resources will be consumed. Energy is a unit that measures the amount of computation required for TVM to perform specific operations on the TRON network. Energy is calculated in the same way as Ethereum. The more instructions a transaction executes, the more energy it consumes, and the amount of energy consumed by different instructions are different. For more information about bandwidth and energy, please refer to 
TRON Resource Model
.


TVM

TRON TVM and Ethereum EVM are compatible but differ in some details, please refer to 
Differences between TVM and EVM


API

Ethereum supports JSON-RPC 2.0 specification APIs, TRON supports Http and gRPC APIs, and TRON also provides Ethereum-compatible 
JSON-RPC 2.0 APIs
.




Overview


This document is designed to help you build Web3 applications on TRON, including the introduction of TRON's basic concepts and core modules, development tools, and various examples. You can choose a theme according to your needs:




For DApp Developers


For Super Representatives and Voters


Exchange/Wallet integrate with the TRON network




For DApp Developers


If you have Ethereum development experience, then you will easily master TRON development. TRON's smart contract development language is Solidity. The development tools are similar to the tools you are familiar with on Ethereum (such as Truffle, Remix, and Web3js), you can use them proficiently in very little time.


Tools


Below, you may find tools for developing and deploying smart contracts in TRON,




TronBox
: CLI tool used to compile and deploy smart contracts, is similar to Ethereum Truffle


Tron-IDE
: GUI tool used to compile and deploy smart contracts, is similar to Ethereum Remix


TronWeb
: Javascript SDK supporting TRON, is similar to Ethereum Web3.js




Wallet


Like MetaMask, you can connect your DApp with Tronlink, which supports Chrome, Android, and IOS.




DApp integrate with TronLink




Tutorial


If you have zero experience developing DApp in TRON, you may find the tutorial below that is friendly and helpful. It includes a complete set of processes from compiling contracts and UI interaction to deploying and launching. By learning to build a decentralized library, developers can easily master how to deploy their own DApps on the TRON network.




Build a WEB3 App 




Testnet


You may deploy your DApp to Shasta and Nile testnet as well as the TRON mainnet. To learn more, please check


Network
.


For Super Representatives and Voters


The super representative is a participant in the network, running a fullnode for block production, 27 in total. They are elected by voting and are responsible for the block verification and generation of the TRON network. In addition, the super representatives are also responsible for the governance of the network, which plays a vital role in the healthy operation of the network.


Voters stake TRX to obtain voting rights and resources (energy or bandwidth), and the obtained voting rights can vote for super representatives and receive rewards at the same time.




Become an SR


Run a Fullnode


Reward


Brokerage Ratio


Committee and Proposals




Exchange/Wallet integrate with the TRON network


If you run an exchange or provide a wallet service, you may refer to 
here
 for integration with TRON.
Updated
 
15 days ago
 
Table of Contents




Overview






For DApp Developers




Tools


Wallet


Tutorial


Testnet








For Super Representatives and Voters






Exchange/Wallet integrate with the TRON network





























































































































